from collections.abc import Generator
from qrcode import LUT as LUT, base as base, exceptions as exceptions
from typing import Any

MODE_NUMBER: Any
MODE_ALPHA_NUM: Any
MODE_8BIT_BYTE: Any
MODE_KANJI: Any
MODE_SIZE_SMALL: Any
MODE_SIZE_MEDIUM: Any
MODE_SIZE_LARGE: Any
ALPHA_NUM: bytes
RE_ALPHA_NUM: Any
NUMBER_LENGTH: Any
PATTERN_POSITION_TABLE: Any
G15: Any
G18: Any
G15_MASK: Any
PAD0: int
PAD1: int
BIT_LIMIT_TABLE: Any

def BCH_type_info(data): ...
def BCH_type_number(data): ...
def BCH_digit(data): ...
def pattern_position(version): ...
def mask_func(pattern): ...
def mode_sizes_for_version(version): ...
def length_in_bits(mode, version): ...
def check_version(version) -> None: ...
def lost_point(modules): ...
def optimal_data_chunks(data, minimum: int = ...) -> Generator[Any, None, None]: ...
def to_bytestring(data): ...
def optimal_mode(data): ...

class QRData:
    mode: Any
    data: Any
    def __init__(self, data, mode: Any | None = ..., check_data: bool = ...) -> None: ...
    def __len__(self): ...
    def write(self, buffer) -> None: ...

class BitBuffer:
    buffer: Any
    length: int
    def __init__(self) -> None: ...
    def get(self, index): ...
    def put(self, num, length) -> None: ...
    def __len__(self): ...
    def put_bit(self, bit) -> None: ...

def create_bytes(buffer, rs_blocks): ...
def create_data(version, error_correction, data_list): ...
