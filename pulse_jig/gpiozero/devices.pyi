from .compat import frozendict as frozendict
from .exc import (
    BadPinFactory as BadPinFactory,
    CompositeDeviceBadDevice as CompositeDeviceBadDevice,
    CompositeDeviceBadName as CompositeDeviceBadName,
    CompositeDeviceBadOrder as CompositeDeviceBadOrder,
    DeviceClosed as DeviceClosed,
    GPIODeviceClosed as GPIODeviceClosed,
    GPIOPinInUse as GPIOPinInUse,
    GPIOPinMissing as GPIOPinMissing,
    NativePinFactoryFallback as NativePinFactoryFallback,
    PinFactoryFallback as PinFactoryFallback,
)
from .mixins import SharedMixin as SharedMixin, ValuesMixin as ValuesMixin
from typing import Any

nstr = str
str: Any
native_fallback_message: str

class GPIOMeta(type):
    def __new__(mcls, name, bases, cls_dict): ...
    close: Any
    __attrs__: Any
    def __call__(cls, *args, **kwargs): ...

class GPIOBase:
    def __setattr__(self, name, value): ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, exc_tb) -> None: ...

class Device(ValuesMixin, GPIOBase):
    pin_factory: Any
    def __init__(self, **kwargs) -> None: ...
    @property
    def value(self) -> None: ...
    @property
    def is_active(self): ...

class CompositeDevice(Device):
    def __init__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...
    def __len__(self): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    @property
    def all(self): ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    @property
    def namedtuple(self): ...
    @property
    def value(self): ...
    @property
    def is_active(self): ...

class GPIODevice(Device):
    def __init__(self, pin: Any | None = ..., **kwargs) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    @property
    def pin(self): ...
    @property
    def value(self): ...
