from . import SPI as SPI
from ..exc import (
    DeviceClosed as DeviceClosed,
    PinFixedPull as PinFixedPull,
    PinInvalidBounce as PinInvalidBounce,
    PinInvalidFunction as PinInvalidFunction,
    PinInvalidPull as PinInvalidPull,
    PinInvalidState as PinInvalidState,
    PinPWMFixedValue as PinPWMFixedValue,
    PinSetInput as PinSetInput,
    SPIBadArgs as SPIBadArgs,
    SPIInvalidClockMode as SPIInvalidClockMode,
)
from ..mixins import SharedMixin as SharedMixin
from .pi import PiFactory as PiFactory, PiPin as PiPin, spi_port_device as spi_port_device
from typing import Any

str: Any

class PiGPIOFactory(PiFactory):
    pin_class: Any
    def __init__(self, host: Any | None = ..., port: Any | None = ...) -> None: ...
    def close(self) -> None: ...
    @property
    def connection(self): ...
    @property
    def host(self): ...
    @property
    def port(self): ...
    def spi(self, **spi_args): ...
    def ticks(self): ...
    @staticmethod
    def ticks_diff(later, earlier): ...

class PiGPIOPin(PiPin):
    GPIO_FUNCTIONS: Any
    GPIO_PULL_UPS: Any
    GPIO_EDGES: Any
    GPIO_FUNCTION_NAMES: Any
    GPIO_PULL_UP_NAMES: Any
    GPIO_EDGES_NAMES: Any
    def __init__(self, factory, number) -> None: ...
    frequency: Any
    when_changed: Any
    function: str
    pull: Any
    def close(self) -> None: ...

class PiGPIOHardwareSPI(SPI):
    def __init__(self, clock_pin, mosi_pin, miso_pin, select_pin, pin_factory) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def transfer(self, data): ...

class PiGPIOSoftwareSPI(SPI):
    def __init__(self, clock_pin, mosi_pin, miso_pin, select_pin, pin_factory) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def transfer(self, data): ...

class PiGPIOHardwareSPIShared(SharedMixin, PiGPIOHardwareSPI): ...
class PiGPIOSoftwareSPIShared(SharedMixin, PiGPIOSoftwareSPI): ...
