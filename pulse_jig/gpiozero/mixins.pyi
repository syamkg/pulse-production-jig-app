from .compat import median as median
from .exc import (
    BadEventHandler as BadEventHandler,
    BadQueueLen as BadQueueLen,
    BadWaitTime as BadWaitTime,
    CallbackSetToNone as CallbackSetToNone,
    DeviceClosed as DeviceClosed,
)
from .threads import GPIOThread as GPIOThread
from collections.abc import Generator
from typing import Any

nstr = str
str: Any
callback_warning: str

class ValuesMixin:
    @property
    def values(self) -> Generator[Any, None, None]: ...

class SourceMixin:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> None: ...
    @property
    def source_delay(self): ...
    @source_delay.setter
    def source_delay(self, value) -> None: ...
    @property
    def source(self): ...
    @source.setter
    def source(self, value) -> None: ...

class SharedMixin:
    def __del__(self) -> None: ...

class event:
    handlers: Any
    __doc__: Any
    def __init__(self, doc: Any | None = ...) -> None: ...
    def __get__(self, instance, owner: Any | None = ...): ...
    def __set__(self, instance, value) -> None: ...

class EventsMixin:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> None: ...
    def wait_for_active(self, timeout: Any | None = ...): ...
    def wait_for_inactive(self, timeout: Any | None = ...): ...
    when_activated: Any
    when_deactivated: Any
    @property
    def active_time(self): ...
    @property
    def inactive_time(self): ...

class HoldMixin(EventsMixin):
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> None: ...
    when_held: Any
    @property
    def hold_time(self): ...
    @hold_time.setter
    def hold_time(self, value) -> None: ...
    @property
    def hold_repeat(self): ...
    @hold_repeat.setter
    def hold_repeat(self, value) -> None: ...
    @property
    def is_held(self): ...
    @property
    def held_time(self): ...

class HoldThread(GPIOThread):
    holding: Any
    def __init__(self, parent) -> None: ...
    def held(self, parent) -> None: ...

class GPIOQueue(GPIOThread):
    queue: Any
    partial: Any
    sample_wait: Any
    full: Any
    parent: Any
    average: Any
    ignore: Any
    def __init__(
        self,
        parent,
        queue_len: int = ...,
        sample_wait: float = ...,
        partial: bool = ...,
        average=...,
        ignore: Any | None = ...,
    ) -> None: ...
    @property
    def value(self): ...
    def fill(self) -> None: ...
