from .devices import CompositeDevice as CompositeDevice, Device as Device
from .exc import (
    BadWaitTime as BadWaitTime,
    CompositeDeviceBadDevice as CompositeDeviceBadDevice,
    DeviceClosed as DeviceClosed,
    EnergenieBadSocket as EnergenieBadSocket,
    EnergenieSocketMissing as EnergenieSocketMissing,
    GPIOPinMissing as GPIOPinMissing,
    OutputDeviceBadValue as OutputDeviceBadValue,
    PinInvalidPin as PinInvalidPin,
)
from .fonts import load_font_14seg as load_font_14seg, load_font_7seg as load_font_7seg
from .input_devices import Button as Button
from .mixins import HoldMixin as HoldMixin, SharedMixin as SharedMixin, SourceMixin as SourceMixin
from .output_devices import (
    Buzzer as Buzzer,
    LED as LED,
    Motor as Motor,
    OutputDevice as OutputDevice,
    PWMLED as PWMLED,
    PhaseEnableMotor as PhaseEnableMotor,
    RGBLED as RGBLED,
    TonalBuzzer as TonalBuzzer,
)
from .threads import GPIOThread as GPIOThread
from collections import MutableMapping
from typing import Any

def pairwise(it): ...

class CompositeOutputDevice(SourceMixin, CompositeDevice):
    def on(self) -> None: ...
    def off(self) -> None: ...
    def toggle(self) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...

class ButtonBoard(HoldMixin, CompositeDevice):
    hold_time: Any
    hold_repeat: Any
    def __init__(self, *args, **kwargs): ...
    @property
    def pull_up(self): ...
    @property
    def when_changed(self): ...
    @when_changed.setter
    def when_changed(self, value) -> None: ...

class LEDCollection(CompositeOutputDevice):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def leds(self): ...
    @property
    def active_high(self): ...

class LEDBoard(LEDCollection):
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> None: ...
    def on(self, *args) -> None: ...
    def off(self, *args) -> None: ...
    def toggle(self, *args) -> None: ...
    def blink(
        self,
        on_time: int = ...,
        off_time: int = ...,
        fade_in_time: int = ...,
        fade_out_time: int = ...,
        n: Any | None = ...,
        background: bool = ...,
    ) -> None: ...
    def pulse(
        self, fade_in_time: int = ..., fade_out_time: int = ..., n: Any | None = ..., background: bool = ...
    ) -> None: ...

class LEDBarGraph(LEDCollection):
    def __init__(self, *pins, **kwargs) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value): ...
    @property
    def lit_count(self): ...
    @lit_count.setter
    def lit_count(self, value) -> None: ...

class LEDCharFont(MutableMapping):
    def __init__(self, font) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, char): ...
    def __setitem__(self, char, pins) -> None: ...
    def __delitem__(self, char) -> None: ...

class LEDCharDisplay(LEDCollection):
    def __init__(self, *pins, **kwargs): ...
    @property
    def font(self): ...
    @font.setter
    def font(self, value) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...

class LEDMultiCharDisplay(CompositeOutputDevice):
    def __init__(self, char, *pins, **kwargs) -> None: ...
    def close(self) -> None: ...
    @property
    def plex_delay(self): ...
    @plex_delay.setter
    def plex_delay(self, value) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...

class PiHutXmasTree(LEDBoard):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class LedBorg(RGBLED):
    def __init__(self, initial_value=..., pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class PiLiter(LEDBoard):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class PiLiterBarGraph(LEDBarGraph):
    def __init__(self, pwm: bool = ..., initial_value: float = ..., pin_factory: Any | None = ...) -> None: ...

class TrafficLights(LEDBoard):
    def __init__(
        self,
        red: Any | None = ...,
        amber: Any | None = ...,
        green: Any | None = ...,
        pwm: bool = ...,
        initial_value: bool = ...,
        yellow: Any | None = ...,
        pin_factory: Any | None = ...,
    ) -> None: ...
    def __getattr__(self, name): ...

class PiTraffic(TrafficLights):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class PiStop(TrafficLights):
    LOCATIONS: Any
    def __init__(
        self, location: Any | None = ..., pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...
    ) -> None: ...

class StatusZero(LEDBoard):
    default_labels: Any
    def __init__(self, *labels, **kwargs) -> None: ...

class StatusBoard(CompositeOutputDevice):
    default_labels: Any
    def __init__(self, *labels, **kwargs) -> None: ...

class SnowPi(LEDBoard):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class TrafficLightsBuzzer(CompositeOutputDevice):
    def __init__(self, lights, buzzer, button, pin_factory: Any | None = ...) -> None: ...

class FishDish(CompositeOutputDevice):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class TrafficHat(CompositeOutputDevice):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class TrafficpHat(TrafficLights):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class Robot(SourceMixin, CompositeDevice):
    def __init__(
        self, left: Any | None = ..., right: Any | None = ..., pwm: bool = ..., pin_factory: Any | None = ..., *args
    ) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def forward(self, speed: int = ..., **kwargs) -> None: ...
    def backward(self, speed: int = ..., **kwargs) -> None: ...
    def left(self, speed: int = ...) -> None: ...
    def right(self, speed: int = ...) -> None: ...
    def reverse(self) -> None: ...
    def stop(self) -> None: ...

class RyanteckRobot(Robot):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class CamJamKitRobot(Robot):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class PhaseEnableRobot(SourceMixin, CompositeDevice):
    def __init__(
        self, left: Any | None = ..., right: Any | None = ..., pwm: bool = ..., pin_factory: Any | None = ..., *args
    ) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def forward(self, speed: int = ...) -> None: ...
    def backward(self, speed: int = ...) -> None: ...
    def left(self, speed: int = ...) -> None: ...
    def right(self, speed: int = ...) -> None: ...
    def reverse(self) -> None: ...
    def stop(self) -> None: ...

class PololuDRV8835Robot(PhaseEnableRobot):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...

class _EnergenieMaster(SharedMixin, CompositeOutputDevice):
    def __init__(self, pin_factory: Any | None = ...) -> None: ...
    def close(self) -> None: ...
    def transmit(self, socket, enable) -> None: ...

class Energenie(SourceMixin, Device):
    def __init__(self, socket: Any | None = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    @property
    def socket(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def on(self) -> None: ...
    def off(self) -> None: ...

class PumpkinPi(LEDBoard):
    def __init__(self, pwm: bool = ..., initial_value: bool = ..., pin_factory: Any | None = ...) -> None: ...

class JamHat(CompositeOutputDevice):
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...
    def on(self) -> None: ...
    def off(self) -> None: ...

class Pibrella(CompositeOutputDevice):
    inputs: Any
    outputs: Any
    def __init__(self, pwm: bool = ..., pin_factory: Any | None = ...) -> None: ...
    def on(self) -> None: ...
    def off(self) -> None: ...
