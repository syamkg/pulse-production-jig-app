import threading
from typing import Any

class Protocol:
    def connection_made(self, transport) -> None: ...
    def data_received(self, data) -> None: ...
    def connection_lost(self, exc) -> None: ...

class Packetizer(Protocol):
    TERMINATOR: bytes
    buffer: Any
    transport: Any
    def __init__(self) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def data_received(self, data) -> None: ...
    def handle_packet(self, packet) -> None: ...

class FramedPacket(Protocol):
    START: bytes
    STOP: bytes
    packet: Any
    in_packet: bool
    transport: Any
    def __init__(self) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def data_received(self, data) -> None: ...
    def handle_packet(self, packet) -> None: ...
    def handle_out_of_packet_data(self, data) -> None: ...

class LineReader(Packetizer):
    TERMINATOR: bytes
    ENCODING: str
    UNICODE_HANDLING: str
    def handle_packet(self, packet) -> None: ...
    def handle_line(self, line) -> None: ...
    def write_line(self, text) -> None: ...

class ReaderThread(threading.Thread):
    daemon: bool
    serial: Any
    protocol_factory: Any
    alive: bool
    protocol: Any
    def __init__(self, serial_instance, protocol_factory) -> None: ...
    def stop(self) -> None: ...
    def run(self) -> None: ...
    def write(self, data): ...
    def close(self) -> None: ...
    def connect(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
