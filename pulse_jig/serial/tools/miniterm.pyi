from serial.tools import hexlify_codec as hexlify_codec
from serial.tools.list_ports import comports as comports
from typing import Any

raw_input = input
unichr = chr

def key_description(character): ...

class ConsoleBase:
    byte_output: Any
    output: Any
    def __init__(self) -> None: ...
    def setup(self) -> None: ...
    def cleanup(self) -> None: ...
    def getkey(self) -> None: ...
    def write_bytes(self, byte_string) -> None: ...
    def write(self, text) -> None: ...
    def cancel(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...

class Out:
    fd: Any
    def __init__(self, fd) -> None: ...
    def flush(self) -> None: ...
    def write(self, s) -> None: ...

class Console(ConsoleBase):
    fncodes: Any
    navcodes: Any
    output: Any
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    def getkey(self): ...
    def cancel(self) -> None: ...

class Console(ConsoleBase):
    fd: Any
    old: Any
    enc_stdin: Any
    def __init__(self) -> None: ...
    def setup(self) -> None: ...
    def getkey(self): ...
    def cancel(self) -> None: ...
    def cleanup(self) -> None: ...

class Transform:
    def rx(self, text): ...
    def tx(self, text): ...
    def echo(self, text): ...

class CRLF(Transform):
    def tx(self, text): ...

class CR(Transform):
    def rx(self, text): ...
    def tx(self, text): ...

class LF(Transform): ...

class NoTerminal(Transform):
    REPLACEMENT_MAP: Any
    def rx(self, text): ...
    echo: Any

class NoControls(NoTerminal):
    REPLACEMENT_MAP: Any

class Printable(Transform):
    def rx(self, text): ...
    echo: Any

class Colorize(Transform):
    input_color: str
    echo_color: str
    def __init__(self) -> None: ...
    def rx(self, text): ...
    def echo(self, text): ...

class DebugIO(Transform):
    def rx(self, text): ...
    def tx(self, text): ...

EOL_TRANSFORMATIONS: Any
TRANSFORMATIONS: Any

def ask_for_port(): ...

class Miniterm:
    console: Any
    serial: Any
    echo: Any
    raw: bool
    input_encoding: str
    output_encoding: str
    eol: Any
    filters: Any
    exit_character: Any
    menu_character: Any
    alive: Any
    receiver_thread: Any
    rx_decoder: Any
    tx_decoder: Any
    def __init__(self, serial_instance, echo: bool = ..., eol: str = ..., filters=...) -> None: ...
    transmitter_thread: Any
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def join(self, transmit_only: bool = ...) -> None: ...
    def close(self) -> None: ...
    tx_transformations: Any
    rx_transformations: Any
    def update_transformations(self) -> None: ...
    def set_rx_encoding(self, encoding, errors: str = ...) -> None: ...
    tx_encoder: Any
    def set_tx_encoding(self, encoding, errors: str = ...) -> None: ...
    def dump_port_settings(self) -> None: ...
    def reader(self) -> None: ...
    def writer(self) -> None: ...
    def handle_menu_key(self, c) -> None: ...
    def upload_file(self) -> None: ...
    def change_filter(self) -> None: ...
    def change_encoding(self) -> None: ...
    def change_baudrate(self) -> None: ...
    def change_port(self) -> None: ...
    def suspend_port(self) -> None: ...
    def get_help_text(self): ...

def main(
    default_port: Any | None = ...,
    default_baudrate: int = ...,
    default_rts: Any | None = ...,
    default_dtr: Any | None = ...,
): ...
