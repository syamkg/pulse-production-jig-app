import serial
from collections.abc import Generator
from serial.serialutil import to_bytes as to_bytes
from typing import Any

def sixteen(data) -> Generator[Any, None, None]: ...
def hexdump(data) -> Generator[Any, None, None]: ...

class FormatRaw:
    output: Any
    color: Any
    rx_color: str
    tx_color: str
    def __init__(self, output, color) -> None: ...
    def rx(self, data) -> None: ...
    def tx(self, data) -> None: ...
    def control(self, name, value) -> None: ...

class FormatHexdump:
    start_time: Any
    output: Any
    color: Any
    rx_color: str
    tx_color: str
    control_color: str
    def __init__(self, output, color) -> None: ...
    def write_line(self, timestamp, label, value, value2: str = ...) -> None: ...
    def rx(self, data) -> None: ...
    def tx(self, data) -> None: ...
    def control(self, name, value) -> None: ...

class Serial(serial.Serial):
    formatter: Any
    show_all: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def port(self, value) -> None: ...
    def from_url(self, url): ...
    def write(self, tx): ...
    def read(self, size: int = ...): ...
    def cancel_read(self) -> None: ...
    def cancel_write(self) -> None: ...
    @property
    def in_waiting(self): ...
    def flush(self) -> None: ...
    def reset_input_buffer(self) -> None: ...
    def reset_output_buffer(self) -> None: ...
    def send_break(self, duration: float = ...) -> None: ...
    def break_condition(self, level) -> None: ...
    def rts(self, level) -> None: ...
    def dtr(self, level) -> None: ...
    def cts(self): ...
    def dsr(self): ...
    def ri(self): ...
    def cd(self): ...
