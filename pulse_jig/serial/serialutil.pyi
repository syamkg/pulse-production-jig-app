import io
from collections.abc import Generator
from typing import Any

class memoryview: ...

unicode = str
basestring: Any

def iterbytes(b) -> Generator[Any, None, None]: ...
def to_bytes(seq): ...

XON: Any
XOFF: Any
CR: Any
LF: Any
PARITY_NONE: Any
PARITY_EVEN: Any
PARITY_ODD: Any
PARITY_MARK: Any
PARITY_SPACE: Any
STOPBITS_ONE: Any
STOPBITS_ONE_POINT_FIVE: Any
STOPBITS_TWO: Any
FIVEBITS: Any
SIXBITS: Any
SEVENBITS: Any
EIGHTBITS: Any
PARITY_NAMES: Any

class SerialException(IOError): ...
class SerialTimeoutException(SerialException): ...

class PortNotOpenError(SerialException):
    def __init__(self) -> None: ...

class Timeout:
    TIME: Any
    is_infinite: Any
    is_non_blocking: Any
    duration: Any
    target_time: Any
    def __init__(self, duration) -> None: ...
    def expired(self): ...
    def time_left(self): ...
    def restart(self, duration) -> None: ...

class SerialBase(io.RawIOBase):
    BAUDRATES: Any
    BYTESIZES: Any
    PARITIES: Any
    STOPBITS: Any
    is_open: bool
    portstr: Any
    name: Any
    def __init__(
        self,
        port: Any | None = ...,
        baudrate: int = ...,
        bytesize=...,
        parity=...,
        stopbits=...,
        timeout: Any | None = ...,
        xonxoff: bool = ...,
        rtscts: bool = ...,
        write_timeout: Any | None = ...,
        dsrdtr: bool = ...,
        inter_byte_timeout: Any | None = ...,
        exclusive: Any | None = ...,
        **kwargs
    ) -> None: ...
    @property
    def port(self): ...
    @port.setter
    def port(self, port) -> None: ...
    @property
    def baudrate(self): ...
    @baudrate.setter
    def baudrate(self, baudrate) -> None: ...
    @property
    def bytesize(self): ...
    @bytesize.setter
    def bytesize(self, bytesize) -> None: ...
    @property
    def exclusive(self): ...
    @exclusive.setter
    def exclusive(self, exclusive) -> None: ...
    @property
    def parity(self): ...
    @parity.setter
    def parity(self, parity) -> None: ...
    @property
    def stopbits(self): ...
    @stopbits.setter
    def stopbits(self, stopbits) -> None: ...
    @property
    def timeout(self): ...
    @timeout.setter
    def timeout(self, timeout) -> None: ...
    @property
    def write_timeout(self): ...
    @write_timeout.setter
    def write_timeout(self, timeout) -> None: ...
    @property
    def inter_byte_timeout(self): ...
    @inter_byte_timeout.setter
    def inter_byte_timeout(self, ic_timeout) -> None: ...
    @property
    def xonxoff(self): ...
    @xonxoff.setter
    def xonxoff(self, xonxoff) -> None: ...
    @property
    def rtscts(self): ...
    @rtscts.setter
    def rtscts(self, rtscts) -> None: ...
    @property
    def dsrdtr(self): ...
    @dsrdtr.setter
    def dsrdtr(self, dsrdtr: Any | None = ...) -> None: ...
    @property
    def rts(self): ...
    @rts.setter
    def rts(self, value) -> None: ...
    @property
    def dtr(self): ...
    @dtr.setter
    def dtr(self, value) -> None: ...
    @property
    def break_condition(self): ...
    @break_condition.setter
    def break_condition(self, value) -> None: ...
    @property
    def rs485_mode(self): ...
    @rs485_mode.setter
    def rs485_mode(self, rs485_settings) -> None: ...
    def get_settings(self): ...
    def apply_settings(self, d) -> None: ...
    def readable(self): ...
    def writable(self): ...
    def seekable(self): ...
    def readinto(self, b): ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...
    def send_break(self, duration: float = ...) -> None: ...
    def flushInput(self) -> None: ...
    def flushOutput(self) -> None: ...
    def inWaiting(self): ...
    def sendBreak(self, duration: float = ...) -> None: ...
    def setRTS(self, value: int = ...) -> None: ...
    def setDTR(self, value: int = ...) -> None: ...
    def getCTS(self): ...
    def getDSR(self): ...
    def getRI(self): ...
    def getCD(self): ...
    def setPort(self, port) -> None: ...
    @property
    def writeTimeout(self): ...
    @writeTimeout.setter
    def writeTimeout(self, timeout) -> None: ...
    @property
    def interCharTimeout(self): ...
    @interCharTimeout.setter
    def interCharTimeout(self, interCharTimeout) -> None: ...
    def getSettingsDict(self): ...
    def applySettingsDict(self, d) -> None: ...
    def isOpen(self): ...
    def read_all(self): ...
    def read_until(self, expected=..., size: Any | None = ...): ...
    def iread_until(self, *args, **kwargs) -> Generator[Any, None, None]: ...
