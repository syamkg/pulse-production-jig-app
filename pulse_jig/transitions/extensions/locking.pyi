from transitions.core import Event as Event, Machine as Machine, listify as listify
from typing import Any

class PicklableLock:
    lock: Any
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class IdentManager:
    current: int
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class LockedEvent(Event):
    def trigger(self, model, *args, **kwargs): ...

class LockedMachine(Machine):
    event_cls: Any
    machine_context: Any
    model_context_map: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def add_model(self, model, initial: Any | None = ..., model_context: Any | None = ...): ...
    def remove_model(self, model): ...
    def __getattribute__(self, item): ...
    def __getattr__(self, item): ...
