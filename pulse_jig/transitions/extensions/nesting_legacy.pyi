from ..core import (
    Enum as Enum,
    Event as Event,
    EventData as EventData,
    Machine as Machine,
    MachineError as MachineError,
    State as State,
    Transition as Transition,
    listify as listify,
)
from .nesting import FunctionWrapper as FunctionWrapper
from typing import Any

class NestedState(State):
    separator: str
    children: Any
    def __init__(
        self,
        name,
        on_enter: Any | None = ...,
        on_exit: Any | None = ...,
        ignore_invalid_triggers: Any | None = ...,
        parent: Any | None = ...,
        initial: Any | None = ...,
    ) -> None: ...
    @property
    def parent(self): ...
    @parent.setter
    def parent(self, value) -> None: ...
    @property
    def initial(self): ...
    @initial.setter
    def initial(self, value) -> None: ...
    @property
    def level(self): ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value) -> None: ...
    @property
    def value(self): ...
    def is_substate_of(self, state_name): ...
    def exit_nested(self, event_data, target_state): ...
    def enter_nested(self, event_data, level: Any | None = ...) -> None: ...
    def __deepcopy__(self, memo): ...

class NestedTransition(Transition):
    dest: Any
    def execute(self, event_data): ...
    def __deepcopy__(self, memo): ...

class NestedEvent(Event): ...

class HierarchicalMachine(Machine):
    state_cls: Any
    transition_cls: Any
    event_cls: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def initial(self, value) -> None: ...
    def add_model(self, model, initial: Any | None = ...) -> None: ...
    def is_state(self, state_name, model, allow_substates: bool = ...): ...
    def add_states(
        self,
        states,
        on_enter: Any | None = ...,
        on_exit: Any | None = ...,
        ignore_invalid_triggers: Any | None = ...,
        **kwargs
    ) -> None: ...
    def get_nested_state_names(self): ...
    def get_triggers(self, *args): ...
    def on_enter(self, state_name, callback) -> None: ...
    def on_exit(self, state_name, callback) -> None: ...
    def to_state(self, model, state_name, *args, **kwargs) -> None: ...
