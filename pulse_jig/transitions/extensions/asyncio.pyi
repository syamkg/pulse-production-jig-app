from ..core import (
    Condition as Condition,
    Event as Event,
    EventData as EventData,
    Machine as Machine,
    MachineError as MachineError,
    State as State,
    Transition as Transition,
    listify as listify,
)
from .nesting import (
    HierarchicalMachine as HierarchicalMachine,
    NestedEvent as NestedEvent,
    NestedState as NestedState,
    NestedTransition as NestedTransition,
)
from collections import defaultdict as defaultdict
from typing import Any

class AsyncState(State):
    async def enter(self, event_data) -> None: ...
    async def exit(self, event_data) -> None: ...

class NestedAsyncState(NestedState, AsyncState):
    async def scoped_enter(self, event_data, scope=...) -> None: ...
    async def scoped_exit(self, event_data, scope=...) -> None: ...

class AsyncCondition(Condition):
    async def check(self, event_data): ...

class AsyncTransition(Transition):
    condition_cls: Any
    async def execute(self, event_data): ...

class NestedAsyncTransition(AsyncTransition, NestedTransition): ...

class AsyncEvent(Event):
    async def trigger(self, _model, *args, **kwargs): ...

class NestedAsyncEvent(NestedEvent):
    async def trigger(self, _model, _machine, *args, **kwargs): ...

class AsyncMachine(Machine):
    state_cls: Any
    transition_cls: Any
    event_cls: Any
    async_tasks: Any
    protected_tasks: Any
    current_context: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def add_model(self, model, initial: Any | None = ...) -> None: ...
    async def dispatch(self, trigger, *args, **kwargs): ...
    async def callbacks(self, funcs, event_data) -> None: ...
    async def callback(self, func, event_data) -> None: ...
    @staticmethod
    async def await_all(callables): ...
    async def switch_model_context(self, model) -> None: ...
    async def process_context(self, func, model): ...
    def remove_model(self, model) -> None: ...

class HierarchicalAsyncMachine(HierarchicalMachine, AsyncMachine):
    state_cls: Any
    transition_cls: Any
    event_cls: Any
    async def trigger_event(self, _model, _trigger, *args, **kwargs): ...

class AsyncTimeout(AsyncState):
    dynamic_methods: Any
    timeout: Any
    runner: Any
    def __init__(self, *args, **kwargs) -> None: ...
    async def enter(self, event_data) -> None: ...
    async def exit(self, event_data) -> None: ...
    def create_timer(self, event_data): ...
    @property
    def on_timeout(self): ...
    @on_timeout.setter
    def on_timeout(self, value) -> None: ...

class _DictionaryMock(dict):
    def __setitem__(self, key, item) -> None: ...
    def __getitem__(self, key): ...
